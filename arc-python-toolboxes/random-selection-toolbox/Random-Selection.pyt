#-----------------------------------------------------------------------------# random_selection.py## Author: Anders Olson 2023## Usage: Script is a python toolbox that must be run inside ArcGIS#        interface.## Description: This script contains 2 class.#              1. RandSelection - class randomly selects a defined number of#                 polygons from an input shapefile and outputs the result as shp.##              2. RandCenterPnt - class randomly selects a defined number of#                 polygons from an input shapefile and outputs the center point#                 result as shp.##-------------------------------------------------------------------------------import arcpyimport numpy as npfrom pathlib import Pathclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Label: Toolbox Example"        self.alias = "Alias: Toolbox Example"        # List of tool classes associated with this toolbox        self.tools = [RandSelection,RandCenterPnt]class RandSelection(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Random Polygons"        self.description = ('Tool will randomly select polygons from input and export '\                            'the selection as a new polygon .')        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        # First Parameter        param0 = arcpy.Parameter(            name='in_shapefile',            displayName='Input Shapefile',            datatype='GPLayer',            parameterType='Required',            direction='Input'        )        # Input shapefile must be polygons        param0.filter.list = ['Polygon']        # Second Parameter        param1 = arcpy.Parameter(            name='rand_Feature_Num',            displayName='Number of Random Features',            datatype='GPLong',            parameterType='Required',            direction='Input'        )        # Third Parameter        param2 = arcpy.Parameter(            name='out_features',            displayName='Output Features',            datatype='GPLayer',            parameterType='Required',            direction='Output'        )        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        # Access parameter values        inFeatures  = parameters[0].valueAsText        rNum        = int(parameters[1].valueAsText)        outFeatures = parameters[2].valueAsText        # Get a count of total features found for input        fcCount  = arcpy.management.GetCount(inFeatures)        # Get the name of the OID field        oidField = arcpy.Describe(inFeatures).OIDFieldName        # Get the stem filename of input shp        fcStem = Path(inFeatures).stem        # Output message        arcpy.AddMessage(f'OID field name: {oidField}' )        # Output message        arcpy.AddMessage(f'{fcStem} contains {fcCount} features.' )        # Output Message        arcpy.AddMessage(f'1 of 2: Selecting {rNum} random polygons...')        # Convert the shapefile to a numpy array, pull just the OID        arr = arcpy.da.FeatureClassToNumPyArray(inFeatures, "OID@")        # Generate random sample of OID from the array without replacement        randArr = np.random.choice(arr.shape[0], size=rNum, replace=False)        # Convert array of random OID list to tuple for where clause        tupArr = tuple(randArr)        # Create an export where clause from tuple        code_block = f'{oidField} IN {tupArr}'        # Output Message        arcpy.AddMessage(f'2 of 2: Exporting {rNum} random polygons...')        # Export random polygons using where clause from the list generated by numpy array        arcpy.conversion.ExportFeatures(in_features=inFeatures, out_features=outFeatures, where_clause=code_block)        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass RandCenterPnt(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Random Center Points"        self.description = ('Tool will randomly select polygons from an input shapefile and export '\                            'the center points as a new point shapefile.')        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        # First Parameter        param0 = arcpy.Parameter(            name='in_shapefile',            displayName='Input Shapefile',            datatype='GPLayer',            parameterType='Required',            direction='Input'        )        # Input shapefile must be polygons        param0.filter.list = ['Polygon']        # Second Parameter        param1 = arcpy.Parameter(            name='rand_feature_num',            displayName='Number of Random Center Points',            datatype='GPLong',            parameterType='Required',            direction='Input'        )        # Third Parameter        param2 = arcpy.Parameter(            name='out_features',            displayName='Output Features',            datatype='GPLayer',            parameterType='Required',            direction='Output'        )        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        # Access parameter values        # Script arguments to be populated from ArcToolbox:        inFeature     = parameters[0].valueAsText        num_of_random = int(parameters[1].valueAsText)        outFeature    = parameters[2].valueAsText        # Get a count of total features found for input        fcCount  = arcpy.management.GetCount(inFeature)        # Get the name of the OID field        oidField = arcpy.Describe(inFeature).OIDFieldName        # Get the stem filename of input shp        fcStem = Path(inFeature).stem        # Output message        arcpy.AddMessage(f'OID field name: {oidField}' )        # Output message        arcpy.AddMessage(f'{fcStem} contains {fcCount} features.')        # Output Message        arcpy.AddMessage(f'1 of 1: Selecting {num_of_random} random polygons...')        # Convert the shapefile to a numpy array, pull just the OID        arr = arcpy.da.FeatureClassToNumPyArray(inFeature, "OID@")        # Generate random sample of OID from the array without replacement        randArr = np.random.choice(arr.shape[0], size=num_of_random, replace=False)        # Convert array of random OID list to tuple for where clause        tupArr = tuple(randArr)        # Create an export where clause from tuple        code_block = f'{oidField} IN {tupArr}'        # Create a layer copy of input polygons using where clause to select random polygons        arcpy.management.MakeFeatureLayer(in_features=inFeature,out_layer='randPoly', where_clause=code_block)        # Output Message        arcpy.AddMessage(f'2 of 2: Exporting center point of {num_of_random} random polygons...')        # Export center points for random polygons        arcpy.management.FeatureToPoint('randPoly',outFeature,"INSIDE")        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return